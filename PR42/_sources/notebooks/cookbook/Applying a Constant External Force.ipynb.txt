{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e88ae5c3",
   "metadata": {},
   "source": [
    "## Applying a Fixed External Force\n",
    "\n",
    "There are many situations where it is useful to apply an explicitly specified, external force to particles.  For example,\n",
    "\n",
    "- Applying opposite forces to two molecules to pull them apart\n",
    "- Applying a force to ions to represent an electic field across a membrane\n",
    "- Applying a time varying force that is calculated by a separate code, such as in QM/MM simulations\n",
    "\n",
    "This is easily done with a CustomExternalForce.  Let's start by loading a PDB file and creating a System from it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5d9f3b2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from openmm.app import *\n",
    "from openmm import *\n",
    "from openmm.unit import *\n",
    "\n",
    "pdb = PDBFile('ala_ala_ala.pdb')\n",
    "forcefield = ForceField('amber14-all.xml')\n",
    "system = forcefield.createSystem(pdb.topology, constraints=HBonds)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfc89fc9",
   "metadata": {},
   "source": [
    "Now we can create a CustomExternalForce.  We want it to apply a specified force (fx, fy, fz) to each particle.  Recall that when creating a custom force we specify the energy, and that the force is the negative gradient of the energy.  We therefore want the potential energy as a function of the position (x, y, z) to be `-fx*x-fy*y-fz*z`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cdc5ee34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "external = CustomExternalForce('-fx*x-fy*y-fz*z')\n",
    "system.addForce(external)\n",
    "external.addPerParticleParameter('fx')\n",
    "external.addPerParticleParameter('fy')\n",
    "external.addPerParticleParameter('fz')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0c9e933",
   "metadata": {},
   "source": [
    "You can apply whatever forces you want to whichever particles you want.  For this example, let's apply opposite forces to the two particles at the ends of the chain to stretch it out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "45469228",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "external.addParticle(0, (-10, 0, 0)*kilojoules_per_mole/nanometer)\n",
    "external.addParticle(32, (10, 0, 0)*kilojoules_per_mole/nanometer)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6eae7b6a",
   "metadata": {},
   "source": [
    "Now we can run a simulation of it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "00a34a52",
   "metadata": {},
   "outputs": [],
   "source": [
    "integrator = LangevinMiddleIntegrator(300*kelvin, 1/picosecond, 0.004*picoseconds)\n",
    "simulation = Simulation(pdb.topology, system, integrator)\n",
    "simulation.context.setPositions(pdb.positions)\n",
    "simulation.step(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de970bec",
   "metadata": {},
   "source": [
    "Changing the forces at any time is easy.  Just update the values of the per-particle parameters, then call `updateParametersInContext()` to copy the new values over to the running simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ddecf372",
   "metadata": {},
   "outputs": [],
   "source": [
    "external.setParticleParameters(0, 0, (-20, 0, 0)*kilojoules_per_mole/nanometer)\n",
    "external.updateParametersInContext(simulation.context)"
   ]
  }
 ],
 "metadata": {
  "tags": ["forces", "application layer"],
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
