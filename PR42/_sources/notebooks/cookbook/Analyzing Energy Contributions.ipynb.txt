{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "22b5dd5f",
   "metadata": {},
   "source": [
    "## Analyzing Energy Contributions\n",
    "\n",
    "It is sometimes useful to decompose the total energy of a system into separate components: bonds, angles, nonbonded interactions, etc.  In OpenMM, a force field is made up of Force objects, one for each type of interaction.  Decomposing the energy means identifying the contribution of each Force object.\n",
    "\n",
    "Let's start by loading a PDB file and building a System."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6438bda8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from openmm.app import *\n",
    "from openmm import *\n",
    "from openmm.unit import *\n",
    "\n",
    "pdb = PDBFile('ala_ala_ala.pdb')\n",
    "forcefield = ForceField('amber14-all.xml')\n",
    "system = forcefield.createSystem(pdb.topology)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab7791eb",
   "metadata": {},
   "source": [
    "OpenMM does not have a way to directly query the energy of a Force object.  Instead, it lets you query the energy of a *force group*.  We therefore need each Force object to be in a different group."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1479059a",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i, f in enumerate(system.getForces()):\n",
    "    f.setForceGroup(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b127514f",
   "metadata": {},
   "source": [
    "Like any modification to a System or the Forces it contains, this must be done before you create a Simulation.  Now we can go ahead and create it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "da7b9ecd",
   "metadata": {},
   "outputs": [],
   "source": [
    "integrator = LangevinMiddleIntegrator(300*kelvin, 1/picosecond, 0.004*picoseconds)\n",
    "simulation = Simulation(pdb.topology, system, integrator)\n",
    "simulation.context.setPositions(pdb.positions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "627fc16d",
   "metadata": {},
   "source": [
    "We use `Context.getState()` to query any kind of state information: positions, velocities, forces, energy, etc.  It has an optional `groups` argument which can take a set of force groups.  When this is provided, the forces and energy returned in the State reflect only the specified groups.  We can take advantage of this to get the energy from each group (which corresponds to a single Force, since we put each one into a different group)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "09672abb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HarmonicBondForce 18.088199615478516 kJ/mol\n",
      "HarmonicAngleForce 70.43384552001953 kJ/mol\n",
      "PeriodicTorsionForce 84.32029724121094 kJ/mol\n",
      "NonbondedForce -130.988525390625 kJ/mol\n",
      "CMMotionRemover 0.0 kJ/mol\n"
     ]
    }
   ],
   "source": [
    "for i, f in enumerate(system.getForces()):\n",
    "    state = simulation.context.getState(getEnergy=True, groups={i})\n",
    "    print(f.getName(), state.getPotentialEnergy())"
   ]
  }
 ],
 "metadata": {
  "tags": ["analysis", "forces", "application layer"],
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
