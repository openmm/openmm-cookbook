{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9afbaa7d",
   "metadata": {},
   "source": [
    "## Merging Molecules in a Topology\n",
    "\n",
    "When building models of molecular systems, you sometimes need to merge together pieces that come from different sources.  For example, you might have a protein in one PDB file and a ligand in another PDB file.  You want to combine them into a single Topology object that can be passed to `ForceField.createSystem()`.\n",
    "\n",
    "Let's start by loading two PDB files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9159cb1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from openmm.app import *\n",
    "\n",
    "pdb1 = PDBFile('villin.pdb')\n",
    "pdb2 = PDBFile('ala_ala_ala.pdb')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2c030f2",
   "metadata": {},
   "source": [
    "We can now use the Modeller class to merge them together."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "08dbc97b",
   "metadata": {},
   "outputs": [],
   "source": [
    "modeller = Modeller(pdb1.topology, pdb1.positions)\n",
    "modeller.add(pdb2.topology, pdb2.positions)\n",
    "mergedTopology = modeller.topology\n",
    "mergedPositions = modeller.positions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "faa09ce9",
   "metadata": {},
   "source": [
    "This code simply combines the two files without any concern for how the molecules are positioned relative to each other.  In practice, combining molecules requires care to select their positions.  This might be done by hand in a visualization program, or by a docking code, or in various other ways.  It is up to you to select the positions."
   ]
  }
 ],
 "metadata": {
  "tags": ["modeller", "topology"],
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
