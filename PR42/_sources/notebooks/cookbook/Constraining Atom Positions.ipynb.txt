{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6b971986",
   "metadata": {},
   "source": [
    "## Constraining Atom Positions\n",
    "\n",
    "Sometimes you want to run a simulation in which certain particles are kept completely fixed, unable to move at all.  This is called *constraining* particles (not to be confused with *restraining* particles, which is described in another entry).\n",
    "\n",
    "The easiest way to constrain particles is to set their masses to zero.  When a particle has zero mass, it is treated fixed.  This means\n",
    "\n",
    "- Integrators will never change their positions.\n",
    "- The local energy minimizer will never change their positions.\n",
    "- They do not contribute to the kinetic energy of the system.\n",
    "\n",
    "As an example, let's copy the beginning of the `simulatePdb.py` script from the examples directory.  It loads a PDB file consisting of villin in water and builds a System from it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "760b92bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "from openmm.app import *\n",
    "from openmm import *\n",
    "from openmm.unit import *\n",
    "\n",
    "pdb = PDBFile('villin.pdb')\n",
    "forcefield = ForceField('amber14-all.xml', 'amber14/tip3pfb.xml')\n",
    "system = forcefield.createSystem(pdb.topology, nonbondedMethod=PME,\n",
    "                                 nonbondedCutoff=1*nanometer, constraints=HBonds)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b217bf1b",
   "metadata": {},
   "source": [
    "Now we will set the masses of some particles to 0.  You can choose any set of particles you want, depending on your application.  For example, suppose we want to equilibrate the water while keeping the protein fixed.  Since the protein makes up the first 582 particles, we could write"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "58563050",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(582):\n",
    "    system.setParticleMass(i, 0*amu)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "362b878f",
   "metadata": {},
   "source": [
    "Alternatively we could do it based on information from the Topology, such as the names of atoms, residues, or chains.  For example, this sets the mass of every particle that is *not* water to 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a4a92abd",
   "metadata": {},
   "outputs": [],
   "source": [
    "for atom in pdb.topology.atoms():\n",
    "    if atom.residue.name != 'HOH':\n",
    "        system.setParticleMass(atom.index, 0*amu)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5110d76",
   "metadata": {},
   "source": [
    "Now that we have our System ready, we can create a Simulation and run a few steps."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d3c2bd84",
   "metadata": {},
   "outputs": [],
   "source": [
    "integrator = LangevinMiddleIntegrator(300*kelvin, 1/picosecond, 0.004*picoseconds)\n",
    "simulation = Simulation(pdb.topology, system, integrator)\n",
    "simulation.context.setPositions(pdb.positions)\n",
    "simulation.step(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "928eed18",
   "metadata": {},
   "source": [
    "Let's query the minimized positions and see how the positions of a few atoms have changed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bfdc9f8c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "These positions should be the same (at least up to the limits of single precision):\n",
      "Vec3(x=2.516, y=1.4160000000000001, z=1.9440000000000002) nm\n",
      "Vec3(x=2.5160000324249268, y=1.4160000085830688, z=1.944000005722046) nm\n",
      "\n",
      "These positions should be different:\n",
      "Vec3(x=1.7550000000000001, y=2.556, z=3.3930000000000002) nm\n",
      "Vec3(x=1.7894033193588257, y=2.570143699645996, z=3.349152088165283) nm\n"
     ]
    }
   ],
   "source": [
    "state = simulation.context.getState(getPositions=True)\n",
    "positions = state.getPositions()\n",
    "print('These positions should be the same (at least up to the limits of single precision):')\n",
    "print(pdb.positions[0])\n",
    "print(positions[0])\n",
    "print()\n",
    "print('These positions should be different:')\n",
    "print(pdb.positions[600])\n",
    "print(positions[600])"
   ]
  }
 ],
 "metadata": {
  "tags": ["constraints"],
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
